#!/usr/bin/env bash
# enable full disk access first

set -e -x -o pipefail -p

# Ask for the administrator password
sudo -v

# sudo keep-alive
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# INT/TERM trap
trap 'exit 1' INT TERM

# allow /nix to exist on in the root directory
grep -qxF 'nix' /etc/synthetic.conf || (echo "nix" | sudo tee -a /etc/synthetic.conf 1> /dev/null)

# "stitches and creates synthetic objects on root volume group"—e.g. mount synthetics without rebooting
/System/Library/Filesystems/apfs.fs/Contents/Resources/apfs.util -t || true

# diskutil list | grep APFS
sudo diskutil apfs addVolume disk1 APFS 'Nix Store' -mountpoint /nix

sudo chown $USER /nix

# mount nix on boot
grep -qF 'Label=Nix' /etc/fstab || (echo -e 'LABEL=Nix\\040Store /nix apfs rw,nobrowse' | sudo tee -a /etc/fstab 1> /dev/null)


# install nix
sh <(curl -L https://nixos.org/nix/install) --no-daemon
. /Users/${USER}/.nix-profile/etc/profile.d/nix.sh

#[[ $(command -v xcodebuild) ]] && sudo -n xcodebuild -license accept

mkdir -p ~/sources/sbaildon
nix run nixpkgs.git -c git clone --origin upstream https://github.com/sbaildon/dotfiles.git ~/sources/sbaildon/dotfiles
nix run nixpkgs.stow -c stow git nixpkgs kitty fish gnupg rg npm vim nvim base16-shell

nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
nix-channel --update
nix-shell '<home-manager>' -A install
home-manager switch

grep -qxF $(command -v fish) /etc/shells || (command -v fish | sudo -n tee -a /etc/shells)
sudo -n chsh -s "$(command -v fish)" "$(whoami)"

#pushd $(mktemp -d)
#mkdir -p macOS; curl -sL https://github.com/sbaildon/macOS/archive/master.tar.gz | tar xz -C macOS --strip-components 1
#pushd macOS

#vim --not-a-term +PlugUpgrade +PlugInstall +qall

cp /System/Applications/Utilities/Terminal.app/Contents/Resources/Fonts/SF-*.otf ~/Library/Fonts

corebrightness_plist=/private/var/root/Library/Preferences/com.apple.CoreBrightness.plist
user_uuid=$(dscl . -read /Users/$(whoami)/ GeneratedUID | cut -d' ' -f2)
sudo /usr/libexec/PlistBuddy -c "Add :CBUser-${user_uuid}:CBBlueLightReductionCCTTargetRaw integer 2700" $corebrightness_plist || true
sudo /usr/libexec/PlistBuddy -c "Set :CBUser-${user_uuid}:CBBlueReductionStatus:BlueReductionEnabled 1" $corebrightness_plist
sudo /usr/libexec/PlistBuddy -c "Set :CBUser-${user_uuid}:CBBlueReductionStatus:BlueReductionMode 1" $corebrightness_plist
sudo /usr/libexec/PlistBuddy -c "Set :CBUser-${user_uuid}:CBBlueReductionStatus:AutoBlueReductionEnabled 1" $corebrightness_plist
sudo killall cfprefsd
sudo killall corebrightnessd

defaults write -g AppleShowScrollBars -string "WhenScrolling"

# Expand save panel by default
defaults write -g NSNavPanelExpandedStateForSaveMode -bool true
defaults write -g NSNavPanelExpandedStateForSaveMode2 -bool true

# Save to disk (not to iCloud) by default
defaults write -g NSDocumentSaveNewDocumentsToCloud -bool false

# Enable key repeat
defaults write -g ApplePressAndHoldEnabled -bool false

# Disable the “Are you sure you want to open this application?” dialog
defaults write com.apple.LaunchServices LSQuarantine -bool false

# Disable automatic capitalization as it’s annoying when typing code
defaults write -g NSAutomaticCapitalizationEnabled -bool false

# Disable smart dashes as they’re annoying when typing code
defaults write -g NSAutomaticDashSubstitutionEnabled -bool false

# Disable automatic period substitution as it’s annoying when typing code
defaults write -g NSAutomaticPeriodSubstitutionEnabled -bool false

# Disable smart quotes as they’re annoying when typing code
defaults write -g NSAutomaticQuoteSubstitutionEnabled -bool false

# Disable auto-correct
defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false

# Prompt for password immediately after screensaver/sleep
defaults write com.apple.screensaver askForPassword -int 1
defaults write com.apple.screensaver askForPasswordDelay -int 0

# Enable tap to click. (Don't have to press down on the trackpad -- just tap it.)
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults write com.apple.AppleMultitouchTrackpad Clicking -bool true
defaults -currentHost write -g com.apple.mouse.tapBehavior -int 1
defaults write -g com.apple.mouse.tapBehavior -int 1

# Enable 3-finger drag. (Moving with 3 fingers in any window "chrome" moves the window.)
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadThreeFingerDrag -bool true
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool true

# Trackpad 2 finger notifications
defaults write com.apple.AppleMultitouchTrackpad TrackpadTwoFingerFromRightEdgeSwipeGesture -int 3

# Enable full keyboard access for all controls
# (e.g. enable Tab in modal dialogs)
defaults write -g AppleKeyboardUIMode -int 3

# Show external drives on the desktop
defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true

# Show removable media on the desktop
defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

# Allow text selection in preview
defaults write com.apple.finder QLEnableTextSelection -bool true

# Set Desktop as the default location for new Finder windows
# For other paths, use 'PfLo' and 'file:///full/path/here/'
defaults write com.apple.finder NewWindowTarget -string "PfHm"

# Disable the warning when changing a file extension
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

# When performing a search, search the current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

# Avoid creating .DS_Store files on network or USB volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

# Hide recent tags
defaults write com.apple.finder ShowRecentTags -bool false

# Hide app launcher icons from the Dock
defaults write com.apple.dock static-only -bool TRUE

# Set the icon size of Dock items to 32 pixels
defaults write com.apple.dock tilesize -int 32

killall Finder

# Don’t automatically rearrange Spaces based on most recent use
defaults write com.apple.dock mru-spaces -bool false

# Show status bar
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari ShowOverlayStatusBar -bool true

# Press Tab to highlight each item on a web page
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari WebKitTabToLinksPreferenceKey -bool true
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari com.apple.safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true

# Prevent Safari from opening ‘safe’ files automatically after downloading
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari AutoOpenSafeDownloads -bool false

# Hide Safari’s bookmarks bar by default
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari ShowFavoritesBar -bool false

# Show safari favicons
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari ShowIconsInTabs -bool true

# Show safari full url
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari ShowFullURLInSmartSearchField -bool true

# Restore safari session
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari AlwaysRestoreSessionAtLaunch -bool true

# ...but not private windows
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari ExcludePrivateWindowWhenRestoringSessionAtLaunch -bool true

# Dont purge safri history
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari HistoryAgeInDaysLimit -int 365000

# Safari disable push notiifcation prompts
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari CanPromptForPushNotifications -bool false

# Enable the Develop menu and the Web Inspector in Safari
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari IncludeDevelopMenu -int 1
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari com.apple.safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

# Enable “Do Not Track”
defaults write ~/Library/Containers/com.apple.Safari/Data/Library/Preferences/com.apple.Safari SendDoNotTrackHTTPHeader -bool true

# Check for software updates daily, not just once per week
defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1


# Download newly available updates in background
defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

# Install System data files & security updates
defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

# Prevent Photos from opening automatically when devices are plugged in
defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true

read -rp "Change hostname for this computer (Enter to skip): " hostname

if [[ -n "$hostname" ]]; then
  sudo scutil --set ComputerName "$hostname" && \
  sudo scutil --set HostName "$hostname" && \
  sudo scutil --set LocalHostName "$hostname" && \
  sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$hostname"
fi

# Get user picture from Gravatar and set it as the account picture
{
  TEMP=$(mktemp)
  IFS=' ' read -r -a RECORD_NAME <<< "$(dscl . read ~ RecordName)"
  EMAIL="${RECORD_NAME[2]}"
  curl -o $TEMP "http://www.gravatar.com/avatar/$(md5 -q -s "$EMAIL").jpg?s=600"
  dscl . -delete ~ Picture
  dscl . -delete ~ JPEGPhoto
  sudo dscl . -create ~ Picture $TEMP
  rm $TEMP
}
